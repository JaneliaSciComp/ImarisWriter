name: CMake

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Checkout zlib repository
      uses: actions/checkout@v2
      with:
        repository: madler/zlib
        path: zlib
        ref: v1.2.11
        
    - name: Checkout LZ4 repository
      uses: actions/checkout@v2
      with:
        repository: lz4/lz4
        path: lz4
      
    - name: Checkout HDF5 repository
      uses: actions/checkout@v2
      with:
        repository: HDFGroup/hdf5
        path: hdf5
        ref: hdf5-1_12_0

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: |
        cmake -E make_directory ${{runner.workspace}}/build
        cmake -E make_directory ${{runner.workspace}}/zlib/build
        cmake -E make_directory ${{runner.workspace}}/hdf5/build
        cmake -E make_directory ${{runner.workspace}}/lz4/build
        cmake -E make_directory ${{runner.workspace}}/install
        cmake -E make_directory ${{runner.workspace}}/zlib/install
        cmake -E make_directory ${{runner.workspace}}/hdf5/install
        cmake -E make_directory ${{runner.workspace}}/lz4/install
           
    - name: Build zlib
      shell: bash
      working-directory: ${{runner.workspace}}/zlib/build
      run: |
        cmake $GITHUB_WORKSPACE/zlib -DCMAKE_BUILD_TYPE=$BUILD_TYPE
        cmake --build . --config $BUILD_TYPE --target install
        
    - name: Build LZ4
      shell: bash
      working-directory: ${{runner.workspace}}/lz4/build
      run: |
        cmake $GITHUB_WORKSPACE/lz4/build/cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_STATIC_LIBS=ON
        cmake --build . --config $BUILD_TYPE --target install
        
    - name: Cache HDF5
      uses: actions/cache@v2
      id: cache-hdf5
      with:
        path: ${{runner.workspace}}/hdf5/install
        key: ${{ runner.os }}-hdf5-${{ hashFiles('hdf5/README.txt') }}
        
    - name: Build HDF5
      if: steps.cache-hdf5.outputs.cache-hit != 'true'
      shell: bash
      working-directory: ${{runner.workspace}}/hdf5/build
      run: |
        cmake $GITHUB_WORKSPACE/hdf5 -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_SHARED_LIBS:BOOL=ON -DBUILD_TESTING:BOOL=OFF -DHDF5_BUILD_TOOLS:BOOL=OFF -DHDF5_BUILD_EXAMPLES:BOOL=OFF -DHDF5_BUILD_CPP_LIB:BOOL=OFF
        cmake --build . --config $BUILD_TYPE --target install

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DHDF5_ROOT="C:/Program Files/HDF_Group/HDF5/1.12.0/" -DZLIB_ROOT="C:/Program Files (x86)/zlib/" -DLZ4_ROOT="C:/Program Files (x86)/LZ4/" -DCMAKE_INSTALL_PREFIX=${{runner.workspace}}/install

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
      
    - uses: actions/upload-artifact@v2
      with:
        name: ZLIB
        path: ${{runner.workspace}}/zlib/build

    - uses: actions/upload-artifact@v2
      with:
        name: HDF5
        path: ${{runner.workspace}}/hdf5/build
        
    - uses: actions/upload-artifact@v2
      with:
        name: LZ4
        path: ${{runner.workspace}}/lz4/build
        
    - uses: actions/upload-artifact@v2
      with:
        name: ImarisWriter
        path: ${{runner.workspace}}/build
 
    - uses: actions/upload-artifact@v2
      with:
        name: DLLs
        path: ${{runner.workspace}}/**/*.dll
